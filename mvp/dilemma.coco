import axelrod as axl
import nashpy as nash

#"""parameters for a PD game, which is the only we'll be trying. Could be generalized to other games"""
data pdGameParams(alpha)

# makeSymmetricGame :: (r, s, t, p) -> axl.game.Game
# params are reward numbers
def makeSymmetricGame(r, s, t, p) = axl.game.Game(r=r, s=s, t=t, p=p)
def makeSymmetricMatch(n_turns, game, strat1,strat2) = axl.Match((strat1,strat2), turns = n_turns, game=game)
makeSymmetricEncounter = makeSymmetricMatch$(1)
def makePD() = makeSymmetricGame(r=3, p=1, s=0, t=5)
def makePDEncounter(strat1,strat2) = makeSymmetricEncounter(game=makePD(), strat1=strat1, strat2=strat2)
def playSymmetricMatch(match) = 
  match.play()
  match
def getMatchAvgRewards(match) = match.final_score_per_turn()
def getMatchMoves(match) = match.result
# makeAsymmetricGame :: (A, B) -> nash.Game
# A,B = 2x2 reward matrices
def makeAsymmetricGame(A,B) = nash.Game(A, B)    
# getNashEq :: nash.Game
def getNashEqs(game) = [eq for eq in game.support_enumeration()]
def calcDilemmaPayoffs(game, strat1, strat2) = makeSymmetricEncounter(game=game, strat1=strat1, strat2=strat2) |> playSymmetricMatch |> getMatchAvgRewards

#@memoize()
def estimateDilemmaPayoffs(strat1, strat2) = calcDilemmaPayoffs(makePD(), strat1, strat2)