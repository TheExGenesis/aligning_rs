from collections import Counter
from utils import *
from data import * 
import pandas as pd

import math
from toolz.functoolz import apply



def calcGamePayoff(row):
    score = row.game.score
    moves = row.moves
    scores = map(score,moves)
    total = scores |*> zip |> map$(sum) |> list
    return total

# def calcAgentPayoff(hap, agent):

def calcExternalPayoff(hap, row):
    return hap.loc[hap.pick == hap.index[row['index']]].gamePayoff.map(.[1]).sum()

def calcAllPayoffs(hap):
    hap_ind = hap.reset_index()
    hap_ind['gamePayoff'] = hap_ind.apply(calcGamePayoff, axis=1)
    # hap.loc[hap.pick == hap.index[3]]
    hap['totalScore'] = hap_ind.apply(x-> calcExternalPayoff(hap_ind, x) + x.gamePayoff[0], axis=1)
    return hap


# stratShares :: agents -> [float] 
def dilemmaPolShares(agents):
    strats = [a.dilemma_policy for a in agents]
    n = len(strats)
    shares = {pol:c/n for (pol,c) in Counter(strats).items()}
    return shares

def polShares(hap) = hap.groupby('policy').size()

def scoreDist(hap) = hap.totalScore.hist(bins = 100)
def saveScoreDist(path, hap): hap |> scoreDist |> saveFigure$(path)

def medianScore(hap) = hap.totalScore.median()

def coopRate(hap) = 
    c = hap.moves.str.count('C').sum()
    d = hap.moves.str.count('D').sum()
    c/(c+d)

def totalScore(hap) = hap.totalScore.sum()

# tookRec :: agentRecord -> Bool
def tookRec(a) = a.pick == a.rec
def totalMedScore(hap) = len(hap[hap['pick'] == hap['rec']].index)

# overTime :: fn -> [hap] -> fig
def overTime(fn, haps):
    points = pd.DataFrame([fn(hap) for hap in haps])
    return points

def linePlotSeries(series) = series.plot.line()

def multiLinePlot(df) = df.groupby()

# a[0].to_frame().T.append(a[0], ignore_index=True)


def saveLinePlot(path, fn, haps) = haps |> overTime$(fn) |> linePlotSeries |> saveFigure$(path)

def saveCoopRatePlot(path, haps) = saveLinePlot(f'{path}/coopRate.png', coopRate, haps)
def saveAgentScorePlot(path, haps) = saveLinePlot(f'{path}/agentScore.png', totalScore, haps)
def saveMediatorScorePlot(path, haps) = saveLinePlot(f'{path}/medScore.png', totalMedScore, haps)
def savePolSharesPlot(path, haps) = saveLinePlot(f'{path}/polShares.png', polShares, haps)

def runAnalysis(storagePath, expName):
    exps = loadExperimentData(storagePath, expName, 'hap.csv')
    funcs = [saveCoopRatePlot, saveAgentScorePlot, saveMediatorScorePlot, savePolSharesPlot]
    for medName, haps in exps.items(): 
        haps = haps|>list
        funcs |> map$(fn->fn(f'{storagePath}/{expName}/{medName}', haps)) |> list |> print

# def calcPayoff(hap, agent):
#     # get payoff of agent row
#     score = hap.iloc[agent].game.score
#     moves = hap.iloc[agent].moves
#     scores = map(score,moves)
#     total = scores |*> zip |> map$(sum)
#     return total
    # get sum of payoffs of rows where agent is the partner


# def vpAgentProp(net, vpType, prop, fn):
#     vp = net.new_vertex_property(vpType)
#     for v in net.get_vertices(): vp[v] = fn(prop |> net.vp.agents[v].)
#     return vp
