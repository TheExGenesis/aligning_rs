from time import time
import os

def timeF(text, fn):
  start = time()
  res = fn()
  end = time()
  print(f"[DEBUG] {text} took {end-start}s")
  return res

# newVP :: string -> fn -> vp # fn :: agent -> type
def newVP(net, vpType, fn):
    vp = net.new_vertex_property(vpType)
    for v in net.get_vertices(): vp[v] = fn(v)
    return vp

# vpAgentProp :: (net, string, string, fn) -> vp
def vpAgentProp(net, vpType, prop, fn) = newVP(net, vpType, v -> prop |> net.vp.agents[v]. |> fn)

# vpSeries :: (net, string, series, fn) -> vp
def vpSeries(net, vpType, series, fn) = newVP(net, vpType, v -> series[v] |> fn)
